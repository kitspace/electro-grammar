const assert = require('better-assert')

const {parse} = require('../lib/index')

describe('parsing', () => {
  it("doesn't parse nonsense", () => {
    const c = parse('this is total rubbish')
    assert(c.type == null)
  })
  it('returns empty object on empty', () => {
    assert(parse('').type == null)
  })
})

describe('SMD Capacitors', () => {
  it('parses a capacitor', () => {
    const c = parse('2uF 0603')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 2e-6, 'capacitance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it("doesn't parse nonsense", () => {
    const c = parse('this is total rubbish')
    assert(c.type == null)
  })
  it('parses tolerance', () => {
    const c = parse('2uF 0603 30%')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 2e-6, 'capacitance value is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.tolerance === 30, 'tolerance is wrong')
  })
  it('parses +/- in tolerance', () => {
    const c = parse('2uF 0603 +/-30%')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 2e-6, 'capacitance value is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.tolerance === 30, 'tolerance is wrong')
  })
  it('parses ± in tolerance', () => {
    const c = parse('2uF 0603 ±30%')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 2e-6, 'capacitance value is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.tolerance === 30, 'tolerance is wrong')
  })
  it('parses +- in tolerance', () => {
    const c = parse('2uF 0603 +-30%')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 2e-6, 'capacitance value is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.tolerance === 30, 'tolerance is wrong')
  })
  it('parses all the various ways of saying micro', () => {
    const descriptions = [
      '10uF 0402',
      '10 micro Farad 0402',
      '10𝛍F 0402',
      '10𝜇F 0402',
      '10𝝁 F 0402',
      '10    𝝻F 0402',
      '10𝞵F 0402',
    ]
    descriptions.forEach(d => {
      const c = parse(d)
      assert(c.type === 'capacitor')
      assert(c.capacitance === 10e-6, 'capacitance is wrong')
      assert(c.size === '0402', 'size is wrong')
    })
  })
  it('ignores extra words', () => {
    const c = parse('100nF 0603 kajdlkja alkdjlkajd')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.unmatched.join(' ') === 'kajdlkja alkdjlkajd')
  })
  it('ignores extra words 2', () => {
    const c = parse('adjalkjd 100nF akjdlkjda 0603 kajdlkja alkdjlkajd')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.unmatched.join(' ') === 'adjalkjd akjdlkjda kajdlkja alkdjlkajd')
  })
  it('ignores extra words 3', () => {
    const c = parse('capacitor 100nF 0603, warehouse 5')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    // maybe should be `, warehouse 5`
    assert(c.unmatched.join(' ') === 'warehouse')
  })
  it('ignores extra words 4', () => {
    const c = parse('adjalkjd 0603 akjdlkjda 100nF kajdlkja alkdjlkajd')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.unmatched.join(' ') === 'adjalkjd akjdlkjda kajdlkja alkdjlkajd')
  })
  it('parses 1n5F', () => {
    const c = parse('1n5F 0603 X7R')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 1.5e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'X7R', 'characteristic is wrong')
  })
  it('parses 100NF', () => {
    const c = parse('100NF 0603 X7R')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'X7R', 'characteristic is wrong')
  })
  it('parses 100UF', () => {
    const c = parse('100UF 0603 X7R')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-6, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'X7R', 'characteristic is wrong')
  })
  it('parses characteristic X7R', () => {
    const c = parse('100nF 0603 X7R')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'X7R', 'characteristic is wrong')
  })
  it('parses characteristic x7r', () => {
    const c = parse('100nF 0603 x7r')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'X7R', 'characteristic is wrong')
  })
  it('parses characteristic Z5U', () => {
    const c = parse('100nF 0603 Z5U')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'Z5U', 'characteristic is wrong')
  })
  it('parses characteristic Y5V', () => {
    const c = parse('100nF 0603 Y5V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'Y5V', 'characteristic is wrong')
  })
  it('parses characteristic C0G', () => {
    const c = parse('100nF 0603 C0G')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic NPO', () => {
    const c = parse('100nF 0603 NP0')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic np0', () => {
    const c = parse('100nF 0603 NP0')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic c0g', () => {
    const c = parse('100nF 0603 c0g')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic cog', () => {
    const c = parse('100nF 0603 cog')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic npO', () => {
    const c = parse('100nF 0603 npO')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic COG', () => {
    const c = parse('100nF 0603 COG')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses characteristic C0G/NP0', () => {
    const c = parse('100nF 0603 C0G/NP0')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.characteristic === 'C0G', 'characteristic is wrong')
  })
  it('parses without metric prefix', () => {
    const c = parse('1F 0603 25V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 1, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 25, 'rating is wrong')
  })
  it('parses lower case f as farad', () => {
    const c = parse('1f 0603 25V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 1, 'capacitance is wrong')
  })
  it('parses "Farad" as farad', () => {
    const c = parse('1 Farad 0603 25V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 1, 'capacitance is wrong')
  })
  it('parses voltage rating', () => {
    const c = parse('100nF 0603 25V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 25, 'rating is wrong')
  })
  it('parses 6v3', () => {
    const c = parse('100nF 0603 6v3')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 6.3, 'rating is wrong')
  })
  it('parses 6V3', () => {
    const c = parse('100nF 0603 6V3')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 6.3, 'rating is wrong')
  })
  it('parses 6.3V', () => {
    const c = parse('100nF 0603 6.3V')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 6.3, 'rating is wrong')
  })
  it('parses 6.3v', () => {
    const c = parse('100nF 0603 6.3v')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 6.3, 'rating is wrong')
  })
  it('parses voltage rating with small v and space', () => {
    const c = parse('100nF 0603 25 v')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
    assert(c.voltage_rating === 25, 'rating is wrong')
  })
  it('takes a hint', () => {
    const c = parse('C 100n 0603')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('takes a hint 2', () => {
    const c = parse('Capacitor 100n 0603')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('takes a hint 3', () => {
    const c = parse('cap 100n 0603')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 100e-9, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses 0.0001F', () => {
    const c = parse('0603 0.0001F')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 0.0001, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses 0.0001 F', () => {
    const c = parse('0603 0.0001 F')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 0.0001, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses 0.1mF', () => {
    const c = parse('0603 0.1mF')
    assert(c.type === 'capacitor')
    assert(c.capacitance === 0.0001, 'capacitance is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it("doesn't accidentally parse 01005 as value", () => {
    const c = parse('capacitor 01005')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '01005', 'size is wrong')
  })
  it("doesn't accidentally parse 0201 as value", () => {
    const c = parse('capacitor 0201')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0201', 'size is wrong')
  })
  it("doesn't accidentally parse 0402 as value", () => {
    const c = parse('capacitor 0402')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it("doesn't accidentally parse 0603 as value", () => {
    const c = parse('capacitor 0603')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it("doesn't accidentally parse 0805 as value", () => {
    const c = parse('capacitor 0805')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0805', 'size is wrong')
  })
  it("doesn't accidentally parse 1206 as value", () => {
    const c = parse('capacitor 1206')
    assert(c.type === 'capacitor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '1206', 'size is wrong')
  })
})

describe('SMD Resistors', () => {
  it('parses a resistor', () => {
    const c = parse('1k 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('takes a hint', () => {
    const c = parse('resistor 100')
    assert(c.type === 'resistor')
    assert(c.resistance === 100, 'resistance value is wrong')
  })
  it('takes a hint 2', () => {
    const c = parse('r 10000 0805')
    assert(c.type === 'resistor')
    assert(c.resistance === 10000, 'resistance value is wrong')
  })
  it('takes a hint 3', () => {
    const c = parse('res or whatever 1')
    assert(c.type === 'resistor')
    assert(c.resistance === 1, 'resistance value is wrong')
  })
  it('parses "1k ohm"', () => {
    const c = parse('1k ohm 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1 ohm"', () => {
    const c = parse('1 ohm 0402')
    assert(c.type === 'resistor')
    assert(c.resistance === 1, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it('parses "1k ohms"', () => {
    const c = parse('1k ohms 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1MEG"', () => {
    const c = parse('1MEG 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1M"', () => {
    const c = parse('1M 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1K ohms"', () => {
    const c = parse('1K ohms 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1M1 ohms"', () => {
    const c = parse('1M1 ohms 0603')
    assert(c.type === 'resistor')
    assert(c.resistance === 1100000, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses "1k5"', () => {
    const c = parse('1k5 0402')
    assert(c.type === 'resistor')
    assert(c.resistance === 1500, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it('parses "2r7"', () => {
    const c = parse('2r7 0402')
    assert(c.type === 'resistor')
    assert(c.resistance === 2.7, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it('parses "2R7"', () => {
    const c = parse('2R7 0402')
    assert(c.type === 'resistor')
    assert(c.resistance === 2.7, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it('parses "1.5k"', () => {
    const c = parse('1.5k 0402')
    assert(c.type === 'resistor')
    assert(c.resistance === 1500, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it('parses "1Ω"', () => {
    const c = parse('1Ω 0805')
    assert(c.type === 'resistor')
    assert(c.resistance === 1, 'resistance value is wrong')
    assert(c.size === '0805', 'size is wrong')
  })
  it('parses "1 Ω"', () => {
    const c = parse('1Ω 0805')
    assert(c.type === 'resistor')
    assert(c.resistance === 1, 'resistance value is wrong')
    assert(c.size === '0805', 'size is wrong')
  })
  it('parses "100R"', () => {
    const c = parse('100R')
    assert(c.type === 'resistor')
    assert(c.resistance === 100, 'resistance value is wrong')
  })
  it('parses "100 R"', () => {
    const c = parse('100 R')
    assert(c.type === 'resistor')
    assert(c.resistance === 100, 'resistance value is wrong')
  })
  it('parses "1 mOhm"', () => {
    const c = parse('1 mOhm')
    assert(c.type === 'resistor')
    assert(c.resistance === 0.001, 'resistance value is wrong')
  })
  it('parses "1 MOhm"', () => {
    const c = parse('1 MOhm')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000000, 'resistance value is wrong')
  })
  it('parses "100 uΩ"', () => {
    const c = parse('100 uΩ')
    assert(c.type === 'resistor')
    assert(c.resistance === 0.0001, 'resistance value is wrong')
  })
  it('parses tolerance', () => {
    const c = parse('1k 0805 5%')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.tolerance === 5, 'tolerance value is wrong')
    assert(c.size === '0805', 'size is wrong')
  })
  it('parses power rating', () => {
    const c = parse('1k 0805 5% 100mW')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.tolerance === 5, 'tolerance value is wrong')
    assert(c.size === '0805', 'size is wrong')
    assert(c.power_rating === 0.100, 'power rating is wrong')
  })
  it('parses power rating 2', () => {
    const c = parse('0 ohm 0201 0.125W')
    assert(c.type === 'resistor')
    assert(c.resistance === 0, 'resistance value is wrong')
    assert(c.size === '0201', 'size is wrong')
    assert(c.power_rating === 0.125, 'power rating is wrong')
  })
  it('parses fractional power rating', () => {
    const c = parse('0 ohm 0201 1/8W')
    assert(c.type === 'resistor')
    assert(c.resistance === 0, 'resistance value is wrong')
    assert(c.size === '0201', 'size is wrong')
    assert(c.power_rating === 0.125, 'power rating is wrong')
  })
  it('parses fractional power rating 2', () => {
    const c = parse('resistor 1k 0201 1/2 watts')
    assert(c.type === 'resistor')
    assert(c.resistance === 1000, 'resistance value is wrong')
    assert(c.size === '0201', 'size is wrong')
    assert(c.power_rating === 0.5, 'power rating is wrong')
  })
  it("doesn't accidentally parse 01005 as value", () => {
    const c = parse('resistor 01005')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '01005', 'size is wrong')
  })
  it("doesn't accidentally parse 0201 as value", () => {
    const c = parse('resistor 0201')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0201', 'size is wrong')
  })
  it("doesn't accidentally parse 0402 as value", () => {
    const c = parse('resistor 0402')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0402', 'size is wrong')
  })
  it("doesn't accidentally parse 0603 as value", () => {
    const c = parse('resistor 0603')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0603', 'size is wrong')
  })
  it("doesn't accidentally parse 0805 as value", () => {
    const c = parse('resistor 0805')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '0805', 'size is wrong')
  })
  it("doesn't accidentally parse 1206 as value", () => {
    const c = parse('resistor 1206')
    assert(c.type === 'resistor')
    assert(c.resistance == null, 'resistance value is wrong')
    assert(c.size === '1206', 'size is wrong')
  })
})

describe('SMD LEDs', () => {
  it('parses red LED' , () => {
    const c = parse('led red 0603')
    assert(c.type === 'led')
    assert(c.color === 'red')
    assert(c.size === '0603', 'size is wrong')
  })
  it('parses green LED' , () => {
    const c = parse('SMD LED GREEN 0805')
    assert(c.type === 'led')
    assert(c.color === 'green')
    assert(c.size === '0805', 'size is wrong')
  })
})
